/*
思路：

 只要a和b的数量都大于1 或者单个的那个不在首位 就能找到回文串。可以先计算一个字符串除去单个字符总的子串个数。然后开始分块。之后计算单个的在首位的个数。

*/
#include<bits/stdc++.h>

using namespace std;
#define int long long
vector<int> v;
signed  main(){
    int n;
    cin>>n;
    string s;
    cin>>s;
    for(int i=0;i<n;i++){
        int cnt=1;
        while(s[i]==s[i+1]){
            cnt++;
            i++;
        }
        v.push_back(cnt);
    }
    int ans=n*(n-1)/2;// 除去单个的字母
    int sum=0;
    for(int i=0;i<v.size();i++){
        if(i!=0){
            sum+=v[i-1]-1;// 除去重复
        }
        if(i!=v.size()-1){
            sum+=v[i+1];
        }
    }
    int res=ans-sum;
    cout<<res<<endl;
    return 0;
}